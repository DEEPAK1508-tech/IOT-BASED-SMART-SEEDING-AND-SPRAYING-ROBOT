/******************************************************************************
 * PROJECT: IoT-Based Smart Seeding and Spraying Robot
 * AUTHOR:  Deepak A
 * DATE:    20-09-2025
 * * DESCRIPTION:
 * This firmware is designed for an ESP8266 (NodeMCU) microcontroller to control a 
 * 4-wheel drive robot with an attached sprayer mechanism via the Blynk IoT platform.
 * Movement (forward, reverse, left, right) is controlled using a Joystick widget 
 * in the Blynk app, and the sprayer is toggled with a Button widget.
 *
 * HARDWARE REQUIRED:
 * - NodeMCU ESP8266 Development Board
 * - Motor Driver (e.g., 2 x L298N) or a 5-channel relay module
 * - 4 DC motors for the wheels
 * - 1 Relay and pump/solenoid for the sprayer system
 * - Robot chassis
 * - Appropriate power supply for the motors and NodeMCU
 *
 * SOFTWARE & LIBRARIES:
 * - Arduino IDE
 * - ESP8266 Board Core for Arduino IDE
 * - Blynk Library (by Volodymyr Shymanskyy)
 *
 * BLYNK APP SETUP:
 * - Create a new project in the Blynk app.
 * - Add a Joystick widget and assign it to Virtual Pin V0.
 * - Add a Button widget and assign it to Virtual Pin V1.
 * - Your Auth Token will be sent to your email.
 *
 * INSTRUCTIONS:
 * 1. Install the ESP8266 board core and the Blynk library in your Arduino IDE.
 * 2. Update the `BLYNK_TEMPLATE_ID`, `BLYNK_TEMPLATE_NAME`, and `BLYNK_AUTH_TOKEN` 
 * with the credentials from your Blynk project.
 * 3. Update the `ssid` and `pass` variables with your local WiFi credentials.
 * 4. Upload the code to your NodeMCU board.
 * ******************************************************************************/

#define BLYNK_PRINT Serial
#define BLYNK_TEMPLATE_ID "TMPLvaHqlC9N"
#define BLYNK_TEMPLATE_NAME "FIVE RELAY"
#define BLYNK_AUTH_TOKEN "IcqQGM0TmEIfS54qlRnoG5uGPVkn86SL"

// Include the required libraries
#include <ESP8266WiFi.h>
#include <BlynkSimpleEsp8266.h>

// Your WiFi credentials.
// Set password to "" for open networks.
char ssid[] = "IOT";
char pass[] = "123456789";
char auth[] = BLYNK_AUTH_TOKEN;

// Define motor control pins for NodeMCU
#define m1 D0 // Motor A - Forward
#define m2 D5 // Motor A - Reverse
#define m3 D6 // Motor B - Forward
#define m4 D7 // Motor B - Reverse
#define m5 D8 // Pin for the 5th relay (e.g., sprayer)

// --- Motor Control Functions ---
void forward() {
  digitalWrite(m1, HIGH);
  digitalWrite(m2, LOW);
  digitalWrite(m3, HIGH);
  digitalWrite(m4, LOW);
}

void reverse() {
  digitalWrite(m1, LOW);
  digitalWrite(m2, HIGH);
  digitalWrite(m3, LOW);
  digitalWrite(m4, HIGH);
}

void left() {
  digitalWrite(m1, HIGH);
  digitalWrite(m2, LOW);
  digitalWrite(m3, LOW);
  digitalWrite(m4, HIGH);
}

void right() {
  digitalWrite(m1, LOW);
  digitalWrite(m2, HIGH);
  digitalWrite(m3, HIGH);
  digitalWrite(m4, LOW);
}

void stop_motors() {
  digitalWrite(m1, LOW);
  digitalWrite(m2, LOW);
  digitalWrite(m3, LOW);
  digitalWrite(m4, LOW);
}

// This function is called when the virtual pin V0 in the Blynk app changes.
// It is connected to a Joystick widget for movement.
BLYNK_WRITE(V0) {
  int x = param[0].asInt(); // get x-axis value from joystick
  int y = param[1].asInt(); // get y-axis value from joystick

  // Determine movement based on joystick position
  // Adjust the threshold values (e.g., 200, 50) based on your joystick settings in Blynk
  if (y > 200) {
    forward();
  } else if (y < 50) {
    reverse();
  } else if (x < 50) {
    left();
  } else if (x > 200) {
    right();
  } else {
    stop_motors();
  }
}

// This function is called when the virtual pin V1 in the Blynk app changes.
// It is connected to a Button widget to control the sprayer.
BLYNK_WRITE(V1)
{
  int buttonState = param.asInt(); // read button state (0 or 1)
  if (buttonState == 1) {
    digitalWrite(m5, HIGH); // Turn on sprayer
  } else {
    digitalWrite(m5, LOW);  // Turn off sprayer
  }
}

// Setup function runs once when the board is powered on or reset
void setup() {
  // Start serial communication for debugging
  Serial.begin(9600);

  // Initialize all motor pins as outputs
  pinMode(m1, OUTPUT);
  pinMode(m2, OUTPUT);
  pinMode(m3, OUTPUT);
  pinMode(m4, OUTPUT);
  pinMode(m5, OUTPUT);

  // Ensure all motors and the sprayer are off at the start
  stop_motors();
  digitalWrite(m5, LOW);

  // Connect to the Blynk server
  Blynk.begin(auth, ssid, pass, "blynk.cloud", 80);
}

// Loop function runs continuously after setup
void loop() {
  // This function keeps the connection to Blynk active
  Blynk.run();
}

